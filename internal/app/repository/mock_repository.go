// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/repository/repository.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	model "github.com/JustWorking42/gophermart-yandex/internal/app/model"
	gomock "github.com/golang/mock/gomock"
)

// MockAppRepository is a mock of AppRepository interface.
type MockAppRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAppRepositoryMockRecorder
}

// MockAppRepositoryMockRecorder is the mock recorder for MockAppRepository.
type MockAppRepositoryMockRecorder struct {
	mock *MockAppRepository
}

// NewMockAppRepository creates a new mock instance.
func NewMockAppRepository(ctrl *gomock.Controller) *MockAppRepository {
	mock := &MockAppRepository{ctrl: ctrl}
	mock.recorder = &MockAppRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppRepository) EXPECT() *MockAppRepositoryMockRecorder {
	return m.recorder
}

// GetBalanceAndWithdrawnInCentsByUser mocks base method.
func (m *MockAppRepository) GetBalanceAndWithdrawnInCentsByUser(ctx context.Context, username string) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceAndWithdrawnInCentsByUser", ctx, username)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBalanceAndWithdrawnInCentsByUser indicates an expected call of GetBalanceAndWithdrawnInCentsByUser.
func (mr *MockAppRepositoryMockRecorder) GetBalanceAndWithdrawnInCentsByUser(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceAndWithdrawnInCentsByUser", reflect.TypeOf((*MockAppRepository)(nil).GetBalanceAndWithdrawnInCentsByUser), ctx, username)
}

// GetByUsername mocks base method.
func (m *MockAppRepository) GetByUsername(ctx context.Context, username string) (*model.UserModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsername", ctx, username)
	ret0, _ := ret[0].(*model.UserModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsername indicates an expected call of GetByUsername.
func (mr *MockAppRepositoryMockRecorder) GetByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsername", reflect.TypeOf((*MockAppRepository)(nil).GetByUsername), ctx, username)
}

// GetNonProcessedOrdersID mocks base method.
func (m *MockAppRepository) GetNonProcessedOrdersID(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonProcessedOrdersID", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNonProcessedOrdersID indicates an expected call of GetNonProcessedOrdersID.
func (mr *MockAppRepositoryMockRecorder) GetNonProcessedOrdersID(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonProcessedOrdersID", reflect.TypeOf((*MockAppRepository)(nil).GetNonProcessedOrdersID), ctx)
}

// GetOrdersByUser mocks base method.
func (m *MockAppRepository) GetOrdersByUser(ctx context.Context, username string) ([]model.OrderModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUser", ctx, username)
	ret0, _ := ret[0].([]model.OrderModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByUser indicates an expected call of GetOrdersByUser.
func (mr *MockAppRepositoryMockRecorder) GetOrdersByUser(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUser", reflect.TypeOf((*MockAppRepository)(nil).GetOrdersByUser), ctx, username)
}

// GetWithdrawalsByUser mocks base method.
func (m *MockAppRepository) GetWithdrawalsByUser(ctx context.Context, username string) ([]model.WithdrawalModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalsByUser", ctx, username)
	ret0, _ := ret[0].([]model.WithdrawalModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalsByUser indicates an expected call of GetWithdrawalsByUser.
func (mr *MockAppRepositoryMockRecorder) GetWithdrawalsByUser(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalsByUser", reflect.TypeOf((*MockAppRepository)(nil).GetWithdrawalsByUser), ctx, username)
}

// Register mocks base method.
func (m *MockAppRepository) Register(ctx context.Context, user model.UserModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockAppRepositoryMockRecorder) Register(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAppRepository)(nil).Register), ctx, user)
}

// RegisterOrder mocks base method.
func (m *MockAppRepository) RegisterOrder(ctx context.Context, order model.RegisterOrderModel, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterOrder", ctx, order, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterOrder indicates an expected call of RegisterOrder.
func (mr *MockAppRepositoryMockRecorder) RegisterOrder(ctx, order, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterOrder", reflect.TypeOf((*MockAppRepository)(nil).RegisterOrder), ctx, order, username)
}

// UpdateOrderStatus mocks base method.
func (m *MockAppRepository) UpdateOrderStatus(ctx context.Context, orderID string, accrual float64, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, orderID, accrual, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockAppRepositoryMockRecorder) UpdateOrderStatus(ctx, orderID, accrual, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockAppRepository)(nil).UpdateOrderStatus), ctx, orderID, accrual, status)
}

// WithdrawBalance mocks base method.
func (m *MockAppRepository) WithdrawBalance(ctx context.Context, username string, withdrawal model.WithdrawalModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawBalance", ctx, username, withdrawal)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithdrawBalance indicates an expected call of WithdrawBalance.
func (mr *MockAppRepositoryMockRecorder) WithdrawBalance(ctx, username, withdrawal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawBalance", reflect.TypeOf((*MockAppRepository)(nil).WithdrawBalance), ctx, username, withdrawal)
}
